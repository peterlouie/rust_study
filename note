Data Types
  Memory only stores binary Data
    Anything can be represented in binary
  Program determines what the binary reperesents
  Basic types that are universally useful are provided
  by the language

Basic Data Types
  Boolean
  Integer
  Double
  Character
  String

Varibles
  Assign data to a temporary memory location
    Allows programmer to easily work with memory
  Can be set to any value & types
  Immutable by default, but can be mutable
    Immutable: cannot be changed
    Mutable: can be changed

What are functions?
  A way to encapsulate program functionality
  Optionally accept data
  Optionally return data
  Utilize for code organization
    Also makes code easier to read

===============================================
The println macro
  "Prints" (display) information to the terminal
  Useful for debugging
  Macros use an exclamationi {:?} point to call
  Generate additional Rust code
===============================================
  
Execution Flow
  Code executed line-by-line
  Actions are performed & control flow may changed
    Specific conditions can change control flow
      if 
      else 
      else if 

Repetition
  Called "looping" or "iteration"
  Mutltiple types of loops
    "loops" - infinite loop 
    "while" - conditional loop 


Match
  Add logic to program
  Similar to if..else
  Exhaustive
    All options must be accounted for
 
  match vs else..if 
    match will be checked by the compiler
      if a new possibility is added, you will be notified when this occurs
    else..if is not checked by the compiler  
      If a new possibility is added, your code may contain a bug

=========================================================

Enumeratin
  Data that can be one of multiple different possibilities
    Each possibility is called "variant"
  Provides information about your program to the compiler
    More robust programs

  Enums can only be one variant at a time 
  More robust programs when paired with match
  Make program code easier to read

=========================================================

Structure
  A type that contains mutiple pieces of data
    All or nothing - cannot have some pieces of data and not others
  Each piece of data is called a "field"
  Makes working with data easier
    Similar data can be grouped together

  Recap
    Structs deal with multiple pieces of data
    All fields must be present to create a struct 
    Fields can be accessed using a dot

=========================================================

Tuples
  A type of "record"
  Store data anonymously
    No need to name fields
  Useful to return pairs of data from functions
  Can be "destructured" easily into variables

Expressions
  Rust is an expression-based language
    Most things are evaluated and return some value
  Expression values coalesce to a single point
    Can be used for nesting logic

  Recap
    Expressions allow nested logic
    if and match expressions can be nested
      Best to not use more than two or three levels

=========================================================
Intermediate Memory
  Memory is stored using binary
    Bits: 0 or 1
  Computer optimized for bytes
    1 byte == 8 contiguous Bits
  Fully contiguous

Addresses
  All data in memory has an "address" 
    Used to locate data
    Always the same - only data changes
  Usually don't utilize addresses directly
    Variables handle most of the work

Offsets
  Items can be located at an address using an "offset"
  Offsets begin at 0
  Represent the number of bytes away from the original address
    Normally deal with indexes instead
  
  Recap
    Memory uses addresses & offsets 
    Addresses are permanent, data differs
    Offsets can be used to "index" into some data

=========================================================

Ownership
  
  Managing memory
    Programs must track memory
      If they fail to do so, a "leak" occurs
    Rust utilizes an "ownership" model to manage memory
      The "owner" of memory is responsible for cleaning up the memory
    Memory can either be "moved" or "borrowed"

    Recap
      Memory must be managed in some way to prevent leaks
      Rust uses "ownership" to accomplis memory management
        The "owner" of data  must clean up the memory
        This occurs automatically at the end of the scope
      Default behavior is to "move" memory to a new owner
        Use an ampersand (&) to allow code to "barrow" memory

=========================================================

Vector
  Multiple pieces of data 
    Must be the same type
  Used for lists of information
  Can add, remove, and traverse the entries

  Recap
    Vectors contain multiple pieces of similar data
    Data can be added or removed
    The vec! macro can be used to make vectors 
    Use for .. in to iterate through items of a vector 

=========================================================

String and &str

  Two commonly used types of strings
    String - owned
    &str - borrowed String slice
  Must use an owned String to store in a struct
  Use &str when passing to a function 

    Recap
      Strings are automatically borrowed
      Use .to_owned() or String::from() to create an owned copy
      of a string slice
      Use an owned String when storing in a struct

=========================================================

Derive Macro
  
    #[derive(Debug, Clone, Copy)]
    Clone and Copy should only use on small size 4 to 5 entries

=========================================================

Type Annotations
  
    e.g. let num: i32 = 15
    
    Require for function signatures
    Types are usually inferred
    Can also be specified in code  
      Explicit type annotations

    Recap
      Type annotations are mostly optionla within function bodies
        Occassionally required if compiler cannot infer the type
      Can be specified when using let bindings

=========================================================

Enums Revisit

  enum is a type that can represent one item at a time 
    Each item is called a variant
  enum is not limited to just plain variants
    Each variant cant optionally contain additional data

  enum Mouse{
    LeftClick,
    RightClick,
    MiddleClick,
    //associated data
    Scroll(i32),
    Move(i32, i32)
  }

  Recap
    enum variants can optionally contain data
      The data can be another enum
    Can mix plain identifiers and data-containing variants
      within the same enum
    More than one piece of data can be associated with a variant

=========================================================

Advance Match

  instead of using _ use word like "other" for better code
  
=========================================================

Option 
  A type may be one of two things
    Some data of a specified type
      Data is available
    Nothing 
      No data is available
  Used in scenarios where data may not be required or is unavailable
    Unable to find something
    Ran out of items in a list
    Form field not filled out

       enum Option<T>{
         Some(T),
         None
       }

  Recap
    Useful when needing to work with optional data
    Use Option<type> to declare an optional type


=========================================================

Documentation

    // = comment
    /// will generate Documentation

    command:
      $> cargo doc --open

=========================================================

Standard Library
  
  command:
    $> rustup doc
    Will open web browser


=========================================================

Result

  A data type that contains one of two types of data:
    "Successful" data
      The operation was completed
    "Error" data
      The operation failed
  Used in scenarios where an action needs to be taken,
  but has the possibility of failure
    Copying a filled
    Connectin to a website

      enum Result<T, E>{
        Ok(T),
        Err(E)
      }

    Recap
      Useful when working with functionality that can potentially fail
      Use Result<T, E> when working with results

=========================================================

Hashmap

  Collection that stores data as key-value pairs
    Data is located using the "key"
    The data is the "value"
  Similar to definitions in a dictionary
  Very fast to retrieve data using the key

  Recap
    Store information as key-value pairs
      "Key" is used to access the "value"
    Very fast to insert & find data using key
    Useful when you need to find information and known exactly 
    where it is (via the key)

=========================================================

NOTE: this topics is related Map combinator most of the time use
      closures
      Combinator provide you an easy method to modify data
      Can change the behavior based on data on hand

Closures
  
  Anonymous function
  Convinient since you already not creating new function
  e.g. let add = |a, b| a + b;
  

Map Combinator
  
  can call to chain a function
  can be use in vec!


Option Combinator
  
    can replace match
    it is the method list used in Option<>

  NOTE: b18_optioncombinator have a test code

Iterator

  Simple way to traverse data structure
  Do not execute anything just a configuration step
  iter.min()
  iter.max()
  iter.take()
  iter.filter()
  iter.last()
  iter.count()

=========================================================

Range
  
  Range is useful when you need consecutive values
  1..=3 
  1..4
  'a'..='f'
  
=========================================================

if let

  Only applicable when matching one thing
  Searching for one thing

while let

=========================================================

Module

  Separate your program on other files
  Think module as individual file
